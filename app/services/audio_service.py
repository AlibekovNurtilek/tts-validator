import os
from typing import List, Tuple

from fastapi import HTTPException
from sqlalchemy.orm import Session
from app.models.datasets import AudioDataset
from app.config import BASE_DATA_DIR
from fastapi.responses import FileResponse



def get_audio_filenames_by_dataset_id(
    dataset_id: int,
    db: Session,
    page: int = 1,
    limit: int = 10
) -> Tuple[List[str], int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω .wav —Ñ–∞–π–ª–æ–≤ –ø–æ dataset_id —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        dataset_id (int): ID –¥–∞—Ç–∞—Å–µ—Ç–∞
        db (Session): SQLAlchemy —Å–µ—Å—Å–∏—è
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        limit (int): –ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    Returns:
        (List[str], int): –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dataset = db.query(AudioDataset).filter(AudioDataset.id == dataset_id).first()
    if not dataset:
        raise HTTPException(status_code=404, detail="Dataset not found")

    # –°—Ç—Ä–æ–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    segments_dir = os.path.join(BASE_DATA_DIR, dataset.segments_rel_dir)

    if not os.path.isdir(segments_dir):
        raise HTTPException(status_code=404, detail=f"Segments directory not found")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .wav —Ñ–∞–π–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    all_files = sorted([
        f for f in os.listdir(segments_dir)
        if f.endswith(".wav") and os.path.isfile(os.path.join(segments_dir, f))
    ])

    total = len(all_files)
    start = (page - 1) * limit
    end = start + limit
    page_files = all_files[start:end]

    return page_files, total


def get_audio_file_by_dataset_id_and_name(
    dataset_id: int,
    filename: str,
    db: Session
) -> FileResponse:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ dataset_id –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.

    Args:
        dataset_id (int): ID –¥–∞—Ç–∞—Å–µ—Ç–∞
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, segment_001.wav)
        db (Session): SQLAlchemy —Å–µ—Å—Å–∏—è

    Returns:
        FileResponse: –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    """
    dataset = db.query(AudioDataset).filter(AudioDataset.id == dataset_id).first()
    if not dataset:
        raise HTTPException(status_code=404, detail="Dataset not found")

    segments_dir = os.path.join(BASE_DATA_DIR, dataset.segments_rel_dir)
    abs_file_path = os.path.abspath(os.path.join(segments_dir, filename))

    # üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—É—Ç—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–∞–ø–∫–∏
    if not abs_file_path.startswith(os.path.abspath(segments_dir)):
        raise HTTPException(status_code=403, detail="Invalid filename or path traversal attempt")

    if not os.path.isfile(abs_file_path):
        raise HTTPException(status_code=404, detail="Audio file not found")

    return FileResponse(abs_file_path, media_type="audio/wav")
